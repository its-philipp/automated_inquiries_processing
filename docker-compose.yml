version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: inquiry_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-inquiry_automation}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - inquiry_network

  # Redis for Airflow
  redis:
    image: redis:7-alpine
    container_name: inquiry_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - inquiry_network

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    container_name: inquiry_api
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/inquiry_automation
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - REDIS_HOST=redis
      - PROMETHEUS_MULTIPROC_DIR=/tmp
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./config:/app/config
      - ./models:/app/models
      - transformers_cache:/app/.cache/transformers
      - huggingface_cache:/app/.cache/huggingface
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - inquiry_network
    command: uvicorn src.api.main:app --host 0.0.0.0 --port 8000 --reload
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # MLflow Tracking Server
  mlflow:
    build:
      context: .
      dockerfile: docker/mlflow.Dockerfile
    container_name: inquiry_mlflow
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://postgres:postgres@postgres:5432/mlflow
      - MLFLOW_ARTIFACT_ROOT=/mlflow/artifacts
    ports:
      - "5001:5000"
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - inquiry_network
    command: >
      mlflow server
      --backend-store-uri postgresql://postgres:postgres@postgres:5432/mlflow
      --default-artifact-root /mlflow/artifacts
      --host 0.0.0.0
      --port 5000

  # Airflow Webserver
  airflow-webserver:
    build:
      context: .
      dockerfile: docker/airflow.Dockerfile
    container_name: inquiry_airflow_webserver
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://postgres:postgres@postgres:5432/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://postgres:postgres@postgres:5432/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CORE__FERNET_KEY=''
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./config:/opt/airflow/config
      - ./data:/opt/airflow/data
      - airflow_logs:/opt/airflow/logs
    ports:
      - "8081:8080"
    command: >
      bash -c "airflow db init &&
               sleep 5 &&
               airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com 2>/dev/null || echo 'User may already exist' &&
               airflow webserver"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - inquiry_network

  # Airflow Scheduler
  airflow-scheduler:
    build:
      context: .
      dockerfile: docker/airflow.Dockerfile
    container_name: inquiry_airflow_scheduler
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://postgres:postgres@postgres:5432/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://postgres:postgres@postgres:5432/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CORE__FERNET_KEY=''
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./config:/opt/airflow/config
      - ./data:/opt/airflow/data
      - airflow_logs:/opt/airflow/logs
    command: airflow scheduler
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - inquiry_network

  # Airflow Worker
  airflow-worker:
    build:
      context: .
      dockerfile: docker/airflow.Dockerfile
    container_name: inquiry_airflow_worker
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://postgres:postgres@postgres:5432/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://postgres:postgres@postgres:5432/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CORE__FERNET_KEY=''
      - MACOS_OPTIMIZATION=true  # Enable macOS memory optimization
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./config:/opt/airflow/config
      - ./data:/opt/airflow/data
      - airflow_logs:/opt/airflow/logs
    command: airflow celery worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - inquiry_network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: inquiry_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - inquiry_network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: inquiry_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - inquiry_network

  # Streamlit Dashboard
  dashboard:
    build:
      context: .
      dockerfile: docker/dashboard.Dockerfile
    container_name: inquiry_dashboard
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/inquiry_automation
    ports:
      - "8501:8501"
    volumes:
      - ./inquiry_monitoring_dashboard.py:/app/inquiry_monitoring_dashboard.py
      - ./src:/app/src
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - inquiry_network
    command: streamlit run inquiry_monitoring_dashboard.py --server.port=8501 --server.address=0.0.0.0

  # MLflow Data Population Service
  mlflow-setup:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    container_name: inquiry_mlflow_setup
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - ./scripts:/app/scripts
      - ./src:/app/src
    depends_on:
      mlflow:
        condition: service_started
    networks:
      - inquiry_network
    command: >
      bash -c "sleep 10 &&
               python scripts/setup_mlflow_simple.py &&
               python scripts/setup_bert_tracking.py &&
               echo 'MLflow data population complete'"
    restart: "no"

  # Grafana Dashboard Setup Service
  grafana-setup:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    container_name: inquiry_grafana_setup
    environment:
      - GRAFANA_URL=http://grafana:3000
      - GRAFANA_USERNAME=admin
      - GRAFANA_PASSWORD=admin
    volumes:
      - ./scripts:/app/scripts
      - ./monitoring:/app/monitoring
    depends_on:
      grafana:
        condition: service_started
    networks:
      - inquiry_network
    command: >
      bash -c "sleep 15 &&
               python scripts/setup_grafana_dashboards.py &&
               echo 'Grafana dashboard setup complete'"
    restart: "no"

volumes:
  postgres_data:
  mlflow_artifacts:
  airflow_logs:
  prometheus_data:
  grafana_data:
  transformers_cache:
  huggingface_cache:

networks:
  inquiry_network:
    driver: bridge

